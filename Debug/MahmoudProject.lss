
MahmoudProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  000009d2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bae  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dbb  00000000  00000000  000028d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001012  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  000046a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008ec  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ce5  00000000  00000000  000052c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00005fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 30       	cpi	r26, 0x04	; 4
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e0       	ldi	r26, 0x04	; 4
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 30       	cpi	r26, 0x04	; 4
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  8a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
	ADC_MUX&=0XE0;
	//set Channel
	ADC_MUX|=channel;
	// StartConversion

	SET_BIT(ADC_SRA,ADCSRA_ADSC );
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	8a bb       	out	0x1a, r24	; 26
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	8a b3       	in	r24, 0x1a	; 26
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	8a bb       	out	0x1a, r24	; 26
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 68       	ori	r24, 0x87	; 135
  ae:	86 b9       	out	0x06, r24	; 6
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	87 b9       	out	0x07, r24	; 7
  b4:	08 95       	ret

000000b6 <ADC_Read>:
  b6:	87 70       	andi	r24, 0x07	; 7
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	87 b9       	out	0x07, r24	; 7
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	86 b9       	out	0x06, r24	; 6
  c2:	34 9b       	sbis	0x06, 4	; 6
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <ADC_Read+0xc>
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	86 b9       	out	0x06, r24	; 6
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_Read+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_Read+0x20>
  d6:	00 00       	nop
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	95 b1       	in	r25, 0x05	; 5
  dc:	fb 01       	movw	r30, r22
  de:	91 83       	std	Z+1, r25	; 0x01
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <__vector_16>:

}

void __vector_16() __attribute__((signal));
void __vector_16()
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	ResultInterrupt = ADC_Data;
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	95 b1       	in	r25, 0x05	; 5
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <DC_Motor_on>:
#define      TIMER0_REGISTER_MAX_COUNTS              (0xFF)
#define      MAX_DUTY_CYCLE                          (100.0)


void DC_Motor_on (const DcMotor_ConfigType ConfigCont, uint8 duty_cycle, uint8 Direction)
{
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	c6 2f       	mov	r28, r22
 110:	d7 2f       	mov	r29, r23
 112:	08 2f       	mov	r16, r24
 114:	f9 2e       	mov	r15, r25
 116:	12 2f       	mov	r17, r18
    uint8 Left_dir_pin  = ConfigCont.ChannelID_Left; 

    uint8 dc_counts =   ( (duty_cycle) * (TIMER0_REGISTER_MAX_COUNTS / MAX_DUTY_CYCLE) );
	
	
	Dio_SetChannelDirection(PortId, Enable_pin,    OUTPUT);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	67 2f       	mov	r22, r23
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>
	Dio_SetChannelDirection(PortId, Right_dir_pin, OUTPUT);
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	60 2f       	mov	r22, r16
 126:	8c 2f       	mov	r24, r28
 128:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>
	Dio_SetChannelDirection(PortId, Left_dir_pin,  OUTPUT);
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	6f 2d       	mov	r22, r15
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>
	
	
	
	Dio_WriteChannel(PortId, Enable_pin);
 136:	6d 2f       	mov	r22, r29
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
    if(Direction == RIGHT)
 13e:	11 11       	cpse	r17, r1
 140:	09 c0       	rjmp	.+18     	; 0x154 <DC_Motor_on+0x50>
    {
		
        Dio_WriteChannel(PortId, Right_dir_pin);
 142:	60 2f       	mov	r22, r16
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
        Dio_ClearChannel(PortId, Left_dir_pin);
 14a:	6f 2d       	mov	r22, r15
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
 152:	0a c0       	rjmp	.+20     	; 0x168 <DC_Motor_on+0x64>
    }

    else if (Direction == LEFT)
 154:	11 30       	cpi	r17, 0x01	; 1
 156:	41 f4       	brne	.+16     	; 0x168 <DC_Motor_on+0x64>
    {   
        Dio_WriteChannel(PortId, Left_dir_pin);
 158:	6f 2d       	mov	r22, r15
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
        Dio_ClearChannel(PortId, Right_dir_pin);
 160:	60 2f       	mov	r22, r16
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
        
    }

    //PWM_ON(dc_counts);

}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	08 95       	ret

00000174 <DC_Motor_off>:


void DC_Motor_off(const DcMotor_ConfigType ConfigCont)
{
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	c6 2f       	mov	r28, r22
 17c:	67 2f       	mov	r22, r23
 17e:	18 2f       	mov	r17, r24
 180:	d9 2f       	mov	r29, r25
    //PWM_ON(0x00);
	Dio_ClearChannel(ConfigCont.PortID, ConfigCont.Enable_Pin);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
	Dio_ClearChannel(ConfigCont.PortID, ConfigCont.ChannelID_Right);
 188:	61 2f       	mov	r22, r17
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
	Dio_ClearChannel(ConfigCont.PortID, ConfigCont.ChannelID_Left);
 190:	6d 2f       	mov	r22, r29
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <Dio_WriteChannel>:
	}


	else if(PortID == PORT_D)
	{
		DDRD = Level;
 1a0:	81 11       	cpse	r24, r1
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <Dio_WriteChannel+0x1a>
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <Dio_WriteChannel+0x10>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <Dio_WriteChannel+0xc>
 1b4:	82 2b       	or	r24, r18
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	08 95       	ret
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <Dio_WriteChannel+0x34>
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Dio_WriteChannel+0x2a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Dio_WriteChannel+0x26>
 1ce:	82 2b       	or	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	59 f4       	brne	.+22     	; 0x1ee <Dio_WriteChannel+0x4e>
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <Dio_WriteChannel+0x44>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <Dio_WriteChannel+0x40>
 1e8:	82 2b       	or	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
 1ee:	83 30       	cpi	r24, 0x03	; 3
 1f0:	51 f4       	brne	.+20     	; 0x206 <Dio_WriteChannel+0x66>
 1f2:	22 b3       	in	r18, 0x12	; 18
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_WriteChannel+0x5e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_WriteChannel+0x5a>
 202:	82 2b       	or	r24, r18
 204:	82 bb       	out	0x12, r24	; 18
 206:	08 95       	ret

00000208 <Dio_ClearChannel>:
 208:	81 11       	cpse	r24, r1
 20a:	0c c0       	rjmp	.+24     	; 0x224 <Dio_ClearChannel+0x1c>
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <Dio_ClearChannel+0x10>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Dio_ClearChannel+0xc>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	61 f4       	brne	.+24     	; 0x240 <Dio_ClearChannel+0x38>
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <Dio_ClearChannel+0x2c>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <Dio_ClearChannel+0x28>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	08 95       	ret
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	61 f4       	brne	.+24     	; 0x25c <Dio_ClearChannel+0x54>
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <Dio_ClearChannel+0x48>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <Dio_ClearChannel+0x44>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
 25a:	08 95       	ret
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	59 f4       	brne	.+22     	; 0x276 <Dio_ClearChannel+0x6e>
 260:	22 b3       	in	r18, 0x12	; 18
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <Dio_ClearChannel+0x64>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <Dio_ClearChannel+0x60>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	82 bb       	out	0x12, r24	; 18
 276:	08 95       	ret

00000278 <Dio_SetChannelDirection>:
 278:	81 11       	cpse	r24, r1
 27a:	0a c0       	rjmp	.+20     	; 0x290 <Dio_SetChannelDirection+0x18>
 27c:	8a b3       	in	r24, 0x1a	; 26
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <Dio_SetChannelDirection+0xe>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <Dio_SetChannelDirection+0xa>
 28a:	48 2b       	or	r20, r24
 28c:	4a bb       	out	0x1a, r20	; 26
 28e:	08 95       	ret
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	51 f4       	brne	.+20     	; 0x2a8 <Dio_SetChannelDirection+0x30>
 294:	87 b3       	in	r24, 0x17	; 23
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <Dio_SetChannelDirection+0x26>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <Dio_SetChannelDirection+0x22>
 2a2:	48 2b       	or	r20, r24
 2a4:	47 bb       	out	0x17, r20	; 23
 2a6:	08 95       	ret
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	51 f4       	brne	.+20     	; 0x2c0 <Dio_SetChannelDirection+0x48>
 2ac:	84 b3       	in	r24, 0x14	; 20
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <Dio_SetChannelDirection+0x3e>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <Dio_SetChannelDirection+0x3a>
 2ba:	48 2b       	or	r20, r24
 2bc:	44 bb       	out	0x14, r20	; 20
 2be:	08 95       	ret
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	49 f4       	brne	.+18     	; 0x2d6 <Dio_SetChannelDirection+0x5e>
 2c4:	81 b3       	in	r24, 0x11	; 17
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <Dio_SetChannelDirection+0x56>
 2ca:	44 0f       	add	r20, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <Dio_SetChannelDirection+0x52>
 2d2:	48 2b       	or	r20, r24
 2d4:	41 bb       	out	0x11, r20	; 17
 2d6:	08 95       	ret

000002d8 <Port_Init>:
*  Parameters (out)  : None
*  Return value      : None
*  Description       : initialize Selected Ports and Specific Pins modes 
*  *********************************************************************************************************************/
void Port_Init(const PortConfig* ConfigPtr)
{
 2d8:	bc 01       	movw	r22, r24
    uint8 uint8_PinCounter=0;
    

    for(uint8_PinCounter =0; uint8_PinCounter < REQUIRD_CONFIGURED_PINS; uint8_PinCounter++)
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	00 c1       	rjmp	.+512    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
    {
        Dio_PortType        PortID     = ConfigPtr[uint8_PinCounter].PortId;
 2de:	e9 2f       	mov	r30, r25
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	9f 01       	movw	r18, r30
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	e2 0f       	add	r30, r18
 2ee:	f3 1f       	adc	r31, r19
 2f0:	e6 0f       	add	r30, r22
 2f2:	f7 1f       	adc	r31, r23
 2f4:	20 81       	ld	r18, Z
        Dio_ChannelType     ChannelId  = ConfigPtr[uint8_PinCounter].ChannelId;
 2f6:	31 81       	ldd	r19, Z+1	; 0x01

        if(PortID == PORT_A)
 2f8:	21 11       	cpse	r18, r1
 2fa:	3b c0       	rjmp	.+118    	; 0x372 <Port_Init+0x9a>
        {
            if(ConfigPtr[uint8_PinCounter].Pin_type == INPUT_PIN)
 2fc:	22 81       	ldd	r18, Z+2	; 0x02
 2fe:	21 11       	cpse	r18, r1
 300:	1b c0       	rjmp	.+54     	; 0x338 <Port_Init+0x60>
            {   
                CLEAR_BIT(DDRA,  ChannelId);
 302:	8a b3       	in	r24, 0x1a	; 26
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	da 01       	movw	r26, r20
 30a:	02 c0       	rjmp	.+4      	; 0x310 <Port_Init+0x38>
 30c:	aa 0f       	add	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	3a 95       	dec	r19
 312:	e2 f7       	brpl	.-8      	; 0x30c <Port_Init+0x34>
 314:	9d 01       	movw	r18, r26
 316:	4a 2f       	mov	r20, r26
 318:	40 95       	com	r20
 31a:	84 23       	and	r24, r20
 31c:	8a bb       	out	0x1a, r24	; 26

                if(ConfigPtr[uint8_PinCounter].Pin_mode == PULL_UP)
 31e:	83 81       	ldd	r24, Z+3	; 0x03
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	21 f4       	brne	.+8      	; 0x32c <Port_Init+0x54>
                {
                    SET_BIT(PORTA, ChannelId);
 324:	8b b3       	in	r24, 0x1b	; 27
 326:	28 2b       	or	r18, r24
 328:	2b bb       	out	0x1b, r18	; 27
 32a:	d8 c0       	rjmp	.+432    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

                else if (ConfigPtr[uint8_PinCounter].Pin_mode == PULL_DOWN)
 32c:	81 11       	cpse	r24, r1
 32e:	d6 c0       	rjmp	.+428    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                {
                    CLEAR_BIT(PORTA, ChannelId);
 330:	8b b3       	in	r24, 0x1b	; 27
 332:	48 23       	and	r20, r24
 334:	4b bb       	out	0x1b, r20	; 27
 336:	d2 c0       	rjmp	.+420    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

            }

            else if (ConfigPtr[uint8_PinCounter].Pin_type == OUTPUT_PIN)
 338:	21 30       	cpi	r18, 0x01	; 1
 33a:	09 f0       	breq	.+2      	; 0x33e <Port_Init+0x66>
 33c:	cf c0       	rjmp	.+414    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
            {
               SET_BIT(DDRA, ChannelId);
 33e:	8a b3       	in	r24, 0x1a	; 26
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	da 01       	movw	r26, r20
 346:	02 c0       	rjmp	.+4      	; 0x34c <Port_Init+0x74>
 348:	aa 0f       	add	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	3a 95       	dec	r19
 34e:	e2 f7       	brpl	.-8      	; 0x348 <Port_Init+0x70>
 350:	9d 01       	movw	r18, r26
 352:	8a 2b       	or	r24, r26
 354:	8a bb       	out	0x1a, r24	; 26

               if(ConfigPtr[uint8_PinCounter].Pin_status == HIGH_LEVEL)
 356:	84 81       	ldd	r24, Z+4	; 0x04
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	21 f4       	brne	.+8      	; 0x364 <Port_Init+0x8c>
               {
                    SET_BIT(PORTA, ChannelId);
 35c:	8b b3       	in	r24, 0x1b	; 27
 35e:	28 2b       	or	r18, r24
 360:	2b bb       	out	0x1b, r18	; 27
 362:	bc c0       	rjmp	.+376    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               }

               else if(ConfigPtr[uint8_PinCounter].Pin_status == LOW_LEVEL)
 364:	81 11       	cpse	r24, r1
 366:	ba c0       	rjmp	.+372    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               {
                    CLEAR_BIT(PORTA, ChannelId);
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	20 95       	com	r18
 36c:	28 23       	and	r18, r24
 36e:	2b bb       	out	0x1b, r18	; 27
 370:	b5 c0       	rjmp	.+362    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               }
            }
        }

        
        else if(PortID == PORT_B)
 372:	21 30       	cpi	r18, 0x01	; 1
 374:	d9 f5       	brne	.+118    	; 0x3ec <Port_Init+0x114>
        {
            if(ConfigPtr[uint8_PinCounter].Pin_type == INPUT_PIN)
 376:	82 81       	ldd	r24, Z+2	; 0x02
 378:	81 11       	cpse	r24, r1
 37a:	1b c0       	rjmp	.+54     	; 0x3b2 <Port_Init+0xda>
            {   
                CLEAR_BIT(DDRB, ChannelId);
 37c:	87 b3       	in	r24, 0x17	; 23
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	da 01       	movw	r26, r20
 384:	02 c0       	rjmp	.+4      	; 0x38a <Port_Init+0xb2>
 386:	aa 0f       	add	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	3a 95       	dec	r19
 38c:	e2 f7       	brpl	.-8      	; 0x386 <Port_Init+0xae>
 38e:	9d 01       	movw	r18, r26
 390:	4a 2f       	mov	r20, r26
 392:	40 95       	com	r20
 394:	84 23       	and	r24, r20
 396:	87 bb       	out	0x17, r24	; 23

                if(ConfigPtr[uint8_PinCounter].Pin_mode == PULL_UP)
 398:	83 81       	ldd	r24, Z+3	; 0x03
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	21 f4       	brne	.+8      	; 0x3a6 <Port_Init+0xce>
                {
                    SET_BIT(PORTB, ChannelId);
 39e:	88 b3       	in	r24, 0x18	; 24
 3a0:	28 2b       	or	r18, r24
 3a2:	28 bb       	out	0x18, r18	; 24
 3a4:	9b c0       	rjmp	.+310    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

                else if (ConfigPtr[uint8_PinCounter].Pin_mode == PULL_DOWN)
 3a6:	81 11       	cpse	r24, r1
 3a8:	99 c0       	rjmp	.+306    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                {
                    CLEAR_BIT(PORTB, ChannelId);
 3aa:	88 b3       	in	r24, 0x18	; 24
 3ac:	48 23       	and	r20, r24
 3ae:	48 bb       	out	0x18, r20	; 24
 3b0:	95 c0       	rjmp	.+298    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

            }

            else if (ConfigPtr[uint8_PinCounter].Pin_type == OUTPUT_PIN)
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <Port_Init+0xe0>
 3b6:	92 c0       	rjmp	.+292    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
            {
               SET_BIT(DDRB, ChannelId);
 3b8:	87 b3       	in	r24, 0x17	; 23
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	da 01       	movw	r26, r20
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <Port_Init+0xee>
 3c2:	aa 0f       	add	r26, r26
 3c4:	bb 1f       	adc	r27, r27
 3c6:	3a 95       	dec	r19
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <Port_Init+0xea>
 3ca:	9d 01       	movw	r18, r26
 3cc:	8a 2b       	or	r24, r26
 3ce:	87 bb       	out	0x17, r24	; 23

               if(ConfigPtr[uint8_PinCounter].Pin_status == HIGH_LEVEL)
 3d0:	84 81       	ldd	r24, Z+4	; 0x04
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	21 f4       	brne	.+8      	; 0x3de <Port_Init+0x106>
               {
                    SET_BIT(PORTB, ChannelId);
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	28 2b       	or	r18, r24
 3da:	28 bb       	out	0x18, r18	; 24
 3dc:	7f c0       	rjmp	.+254    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               }

               else if(ConfigPtr[uint8_PinCounter].Pin_status == LOW_LEVEL)
 3de:	81 11       	cpse	r24, r1
 3e0:	7d c0       	rjmp	.+250    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               {
                    CLEAR_BIT(PORTB, ChannelId);
 3e2:	88 b3       	in	r24, 0x18	; 24
 3e4:	20 95       	com	r18
 3e6:	28 23       	and	r18, r24
 3e8:	28 bb       	out	0x18, r18	; 24
 3ea:	78 c0       	rjmp	.+240    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
        }



        
        else if(PortID == PORT_C)
 3ec:	22 30       	cpi	r18, 0x02	; 2
 3ee:	d9 f5       	brne	.+118    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
        {
            if(ConfigPtr[uint8_PinCounter].Pin_type == INPUT_PIN)
 3f0:	82 81       	ldd	r24, Z+2	; 0x02
 3f2:	81 11       	cpse	r24, r1
 3f4:	1b c0       	rjmp	.+54     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
            {   
                CLEAR_BIT(DDRC, ChannelId);
 3f6:	84 b3       	in	r24, 0x14	; 20
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	da 01       	movw	r26, r20
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	aa 0f       	add	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	3a 95       	dec	r19
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	9d 01       	movw	r18, r26
 40a:	4a 2f       	mov	r20, r26
 40c:	40 95       	com	r20
 40e:	84 23       	and	r24, r20
 410:	84 bb       	out	0x14, r24	; 20

                if(ConfigPtr[uint8_PinCounter].Pin_mode == PULL_UP)
 412:	83 81       	ldd	r24, Z+3	; 0x03
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	21 f4       	brne	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
                {
                    SET_BIT(PORTC, ChannelId);
 418:	85 b3       	in	r24, 0x15	; 21
 41a:	28 2b       	or	r18, r24
 41c:	25 bb       	out	0x15, r18	; 21
 41e:	5e c0       	rjmp	.+188    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

                else if (ConfigPtr[uint8_PinCounter].Pin_mode == PULL_DOWN)
 420:	81 11       	cpse	r24, r1
 422:	5c c0       	rjmp	.+184    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                {
                    CLEAR_BIT(PORTC, ChannelId);
 424:	85 b3       	in	r24, 0x15	; 21
 426:	48 23       	and	r20, r24
 428:	45 bb       	out	0x15, r20	; 21
 42a:	58 c0       	rjmp	.+176    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

            }

            else if (ConfigPtr[uint8_PinCounter].Pin_type == OUTPUT_PIN)
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	09 f0       	breq	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	55 c0       	rjmp	.+170    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
            {
               SET_BIT(DDRC, ChannelId);
 432:	84 b3       	in	r24, 0x14	; 20
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	da 01       	movw	r26, r20
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	aa 0f       	add	r26, r26
 43e:	bb 1f       	adc	r27, r27
 440:	3a 95       	dec	r19
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	9d 01       	movw	r18, r26
 446:	8a 2b       	or	r24, r26
 448:	84 bb       	out	0x14, r24	; 20

               if(ConfigPtr[uint8_PinCounter].Pin_status == HIGH_LEVEL)
 44a:	84 81       	ldd	r24, Z+4	; 0x04
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	21 f4       	brne	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
               {
                    SET_BIT(PORTC, ChannelId);
 450:	85 b3       	in	r24, 0x15	; 21
 452:	28 2b       	or	r18, r24
 454:	25 bb       	out	0x15, r18	; 21
 456:	42 c0       	rjmp	.+132    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               }

               else if(ConfigPtr[uint8_PinCounter].Pin_status == LOW_LEVEL)
 458:	81 11       	cpse	r24, r1
 45a:	40 c0       	rjmp	.+128    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               {
                    CLEAR_BIT(PORTC, ChannelId);
 45c:	85 b3       	in	r24, 0x15	; 21
 45e:	20 95       	com	r18
 460:	28 23       	and	r18, r24
 462:	25 bb       	out	0x15, r18	; 21
 464:	3b c0       	rjmp	.+118    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
            }
        }


        
        else if(PortID == PORT_D)
 466:	23 30       	cpi	r18, 0x03	; 3
 468:	c9 f5       	brne	.+114    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
        {
            if(ConfigPtr[uint8_PinCounter].Pin_type == INPUT_PIN)
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	81 11       	cpse	r24, r1
 46e:	1b c0       	rjmp	.+54     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
            {   
                CLEAR_BIT(DDRD, ChannelId);
 470:	81 b3       	in	r24, 0x11	; 17
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	da 01       	movw	r26, r20
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	aa 0f       	add	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	3a 95       	dec	r19
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	9d 01       	movw	r18, r26
 484:	4a 2f       	mov	r20, r26
 486:	40 95       	com	r20
 488:	84 23       	and	r24, r20
 48a:	81 bb       	out	0x11, r24	; 17

                if(ConfigPtr[uint8_PinCounter].Pin_mode == PULL_UP)
 48c:	83 81       	ldd	r24, Z+3	; 0x03
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	21 f4       	brne	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
                {
                    SET_BIT(PORTD, ChannelId);
 492:	82 b3       	in	r24, 0x12	; 18
 494:	28 2b       	or	r18, r24
 496:	22 bb       	out	0x12, r18	; 18
 498:	21 c0       	rjmp	.+66     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

                else if (ConfigPtr[uint8_PinCounter].Pin_mode == PULL_DOWN)
 49a:	81 11       	cpse	r24, r1
 49c:	1f c0       	rjmp	.+62     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                {
                    CLEAR_BIT(PORTD, ChannelId);
 49e:	82 b3       	in	r24, 0x12	; 18
 4a0:	48 23       	and	r20, r24
 4a2:	42 bb       	out	0x12, r20	; 18
 4a4:	1b c0       	rjmp	.+54     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                }

            }

            else if (ConfigPtr[uint8_PinCounter].Pin_type == OUTPUT_PIN)
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	c9 f4       	brne	.+50     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
            {
               SET_BIT(DDRD, ChannelId);
 4aa:	81 b3       	in	r24, 0x11	; 17
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	da 01       	movw	r26, r20
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	aa 0f       	add	r26, r26
 4b6:	bb 1f       	adc	r27, r27
 4b8:	3a 95       	dec	r19
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	9d 01       	movw	r18, r26
 4be:	8a 2b       	or	r24, r26
 4c0:	81 bb       	out	0x11, r24	; 17

               if(ConfigPtr[uint8_PinCounter].Pin_status == HIGH_LEVEL)
 4c2:	84 81       	ldd	r24, Z+4	; 0x04
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
               {
                    SET_BIT(PORTD, ChannelId);
 4c8:	82 b3       	in	r24, 0x12	; 18
 4ca:	28 2b       	or	r18, r24
 4cc:	22 bb       	out	0x12, r18	; 18
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               }

               else if(ConfigPtr[uint8_PinCounter].Pin_status == LOW_LEVEL)
 4d0:	81 11       	cpse	r24, r1
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
               {
                    CLEAR_BIT(PORTD, ChannelId);
 4d4:	82 b3       	in	r24, 0x12	; 18
 4d6:	20 95       	com	r18
 4d8:	28 23       	and	r18, r24
 4da:	22 bb       	out	0x12, r18	; 18
void Port_Init(const PortConfig* ConfigPtr)
{
    uint8 uint8_PinCounter=0;
    

    for(uint8_PinCounter =0; uint8_PinCounter < REQUIRD_CONFIGURED_PINS; uint8_PinCounter++)
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	90 32       	cpi	r25, 0x20	; 32
 4e0:	08 f4       	brcc	.+2      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e2:	fd ce       	rjmp	.-518    	; 0x2de <Port_Init+0x6>
                    CLEAR_BIT(PORTD, ChannelId);
               }
            }
        }
    }
 4e4:	08 95       	ret

000004e6 <LDR_voidInit>:



void LDR_voidInit()
{
	Dio_SetChannelDirection(LDRGroup,LDRPin,INPUT);
 4e6:	40 e0       	ldi	r20, 0x00	; 0
 4e8:	64 e0       	ldi	r22, 0x04	; 4
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>
	#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
	#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
	#endif*/
	ADC_Init();
 4f0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 4f4:	08 95       	ret

000004f6 <AutoLightIntensity>:
	*Light=((uint32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV

}*/

void AutoLightIntensity(uint16* Light)
{
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	00 d0       	rcall	.+0      	; 0x500 <AutoLightIntensity+0xa>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	8c 01       	movw	r16, r24
	uint16 AdcVal = 0;
 506:	1a 82       	std	Y+2, r1	; 0x02
 508:	19 82       	std	Y+1, r1	; 0x01
	ADC_Read(PIN4, &AdcVal); // Read the value from analog channel 1
 50a:	be 01       	movw	r22, r28
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_Read>

	//uint8 percentage = 100 - (((float)(AdcVal) / 1024) * 100); // Calculate the percentage of the value
	*Light = AdcVal;
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	9a 81       	ldd	r25, Y+2	; 0x02
 51a:	f8 01       	movw	r30, r16
 51c:	91 83       	std	Z+1, r25	; 0x01
 51e:	80 83       	st	Z, r24

	
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <ServoSystem>:
	}
}


void ServoSystem()
{
 52e:	df 92       	push	r13
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	00 d0       	rcall	.+0      	; 0x53e <ServoSystem+0x10>
 53e:	cd b7       	in	r28, 0x3d	; 61
 540:	de b7       	in	r29, 0x3e	; 62
	uint16 LdrReadVal= 0;
	uint8 Degree = 0;
	uint16 TmpLdrVal = 0;
 542:	1a 82       	std	Y+2, r1	; 0x02
 544:	19 82       	std	Y+1, r1	; 0x01
	uint8 MaxDegree = 0;
	
	for(uint8 i =0; i<4; i++)
 546:	00 e0       	ldi	r16, 0x00	; 0
void ServoSystem()
{
	uint16 LdrReadVal= 0;
	uint8 Degree = 0;
	uint16 TmpLdrVal = 0;
	uint8 MaxDegree = 0;
 548:	d1 2c       	mov	r13, r1


void ServoSystem()
{
	uint16 LdrReadVal= 0;
	uint8 Degree = 0;
 54a:	10 e0       	ldi	r17, 0x00	; 0
}


void ServoSystem()
{
	uint16 LdrReadVal= 0;
 54c:	e1 2c       	mov	r14, r1
 54e:	f1 2c       	mov	r15, r1
	uint8 Degree = 0;
	uint16 TmpLdrVal = 0;
	uint8 MaxDegree = 0;
	
	for(uint8 i =0; i<4; i++)
 550:	19 c0       	rjmp	.+50     	; 0x584 <ServoSystem+0x56>
	{
		
		ServoMotor_voidSetAngle(Degree);
 552:	81 2f       	mov	r24, r17
 554:	0e 94 45 03 	call	0x68a	; 0x68a <ServoMotor_voidSetAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	2f e3       	ldi	r18, 0x3F	; 63
 55a:	8d e0       	ldi	r24, 0x0D	; 13
 55c:	93 e0       	ldi	r25, 0x03	; 3
 55e:	21 50       	subi	r18, 0x01	; 1
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <ServoSystem+0x30>
 566:	00 c0       	rjmp	.+0      	; 0x568 <ServoSystem+0x3a>
 568:	00 00       	nop
		_delay_ms(1000);
		AutoLightIntensity(&TmpLdrVal);
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <AutoLightIntensity>
		
		
		if(TmpLdrVal > LdrReadVal)
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	9a 81       	ldd	r25, Y+2	; 0x02
 576:	e8 16       	cp	r14, r24
 578:	f9 06       	cpc	r15, r25
 57a:	10 f4       	brcc	.+4      	; 0x580 <ServoSystem+0x52>
		{
			LdrReadVal = TmpLdrVal;
			MaxDegree = Degree;
 57c:	d1 2e       	mov	r13, r17
		AutoLightIntensity(&TmpLdrVal);
		
		
		if(TmpLdrVal > LdrReadVal)
		{
			LdrReadVal = TmpLdrVal;
 57e:	7c 01       	movw	r14, r24
			MaxDegree = Degree;
		}
		Degree += 45;	
 580:	13 5d       	subi	r17, 0xD3	; 211
	uint16 LdrReadVal= 0;
	uint8 Degree = 0;
	uint16 TmpLdrVal = 0;
	uint8 MaxDegree = 0;
	
	for(uint8 i =0; i<4; i++)
 582:	0f 5f       	subi	r16, 0xFF	; 255
 584:	04 30       	cpi	r16, 0x04	; 4
 586:	28 f3       	brcs	.-54     	; 0x552 <ServoSystem+0x24>
			MaxDegree = Degree;
		}
		Degree += 45;	
	}
	
	ServoMotor_voidSetAngle(MaxDegree);
 588:	8d 2d       	mov	r24, r13
 58a:	0e 94 45 03 	call	0x68a	; 0x68a <ServoMotor_voidSetAngle>
 58e:	8f e4       	ldi	r24, 0x4F	; 79
 590:	93 ec       	ldi	r25, 0xC3	; 195
 592:	01 97       	sbiw	r24, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <ServoSystem+0x64>
 596:	00 c0       	rjmp	.+0      	; 0x598 <ServoSystem+0x6a>
 598:	00 00       	nop
	_delay_ms(200);	
 59a:	0f 90       	pop	r0
 59c:	0f 90       	pop	r0
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	08 95       	ret

000005ae <main>:
#include "Servo.h"

void ServoSystem();

int main(void)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x6>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <main+0x8>
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	Port_Init(Port_Config_Pins);
 5ba:	84 e6       	ldi	r24, 0x64	; 100
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Port_Init>
	WaterSensor_Voidinit();
 5c2:	0e 94 85 03 	call	0x70a	; 0x70a <WaterSensor_Voidinit>
	Temp_voidInit();
 5c6:	0e 94 4e 03 	call	0x69c	; 0x69c <Temp_voidInit>
	LDR_voidInit();
 5ca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LDR_voidInit>
	pwm_init();
 5ce:	0e 94 37 03 	call	0x66e	; 0x66e <pwm_init>
	//LCD_Init(LCD_Config);

	uint16 WaterVal= 0, TempSread=0;
 5d2:	1a 82       	std	Y+2, r1	; 0x02
 5d4:	19 82       	std	Y+1, r1	; 0x01
 5d6:	1c 82       	std	Y+4, r1	; 0x04
 5d8:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Degree = 0;
	uint16 TmpLdrVal = 0;
	uint8 MaxDegree = 0;
	uint8 ProtectionFlag = TRUE;
 5da:	81 e0       	ldi	r24, 0x01	; 1
		
	while(1)
	{	
		
		
		if(ProtectionFlag == FALSE)
 5dc:	81 11       	cpse	r24, r1
 5de:	0d c0       	rjmp	.+26     	; 0x5fa <main+0x4c>
		{
			//Dio_WriteChannel(PORT_D, PIN0);
			
			ServoSystem();
 5e0:	0e 94 97 02 	call	0x52e	; 0x52e <ServoSystem>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	3c e2       	ldi	r19, 0x2C	; 44
 5e8:	81 e3       	ldi	r24, 0x31	; 49
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	30 40       	sbci	r19, 0x00	; 0
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <main+0x3e>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <main+0x4a>
 5f8:	00 00       	nop
			/* Turn on Timer for 20 minutes by enabling interrupt in background */
			
		}
		
		
		WaterSensor_VoidGetWaterLevelStateAsyc(&WaterVal);
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	0e 94 88 03 	call	0x710	; 0x710 <WaterSensor_VoidGetWaterLevelStateAsyc>
 602:	8f e4       	ldi	r24, 0x4F	; 79
 604:	93 ec       	ldi	r25, 0xC3	; 195
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <main+0x58>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x5e>
 60c:	00 00       	nop
		_delay_ms(200);
		
		Temp_ErrStateGetReadValue(&TempSread);
 60e:	ce 01       	movw	r24, r28
 610:	03 96       	adiw	r24, 0x03	; 3
 612:	0e 94 51 03 	call	0x6a2	; 0x6a2 <Temp_ErrStateGetReadValue>
		
		if(WaterVal > MAX_WATER_SENSOR_READ)
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	89 3c       	cpi	r24, 0xC9	; 201
 61c:	91 05       	cpc	r25, r1
 61e:	e8 f0       	brcs	.+58     	; 0x65a <main+0xac>
			
			//Dio_WriteChannel(PORT_D, PIN1);
			//Dio_ClearChannel(PORT_D, PIN2);
			
			
			DC_Motor_on(DC_Motor_Config, 0, RIGHT);
 620:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 624:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 628:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 62c:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	c7 01       	movw	r24, r14
 636:	b6 01       	movw	r22, r12
 638:	0e 94 82 00 	call	0x104	; 0x104 <DC_Motor_on>
 63c:	9f e7       	ldi	r25, 0x7F	; 127
 63e:	2a e1       	ldi	r18, 0x1A	; 26
 640:	36 e0       	ldi	r19, 0x06	; 6
 642:	91 50       	subi	r25, 0x01	; 1
 644:	20 40       	sbci	r18, 0x00	; 0
 646:	30 40       	sbci	r19, 0x00	; 0
 648:	e1 f7       	brne	.-8      	; 0x642 <main+0x94>
 64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0x9e>
 64c:	00 00       	nop
			_delay_ms(2000);
			DC_Motor_off(DC_Motor_Config);
 64e:	c7 01       	movw	r24, r14
 650:	b6 01       	movw	r22, r12
 652:	0e 94 ba 00 	call	0x174	; 0x174 <DC_Motor_off>
		
		Temp_ErrStateGetReadValue(&TempSread);
		
		if(WaterVal > MAX_WATER_SENSOR_READ)
		{
			ProtectionFlag = TRUE;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	c1 cf       	rjmp	.-126    	; 0x5dc <main+0x2e>
		}
		
		else
		{
			ProtectionFlag = FALSE;
			Dio_ClearChannel(PORT_D, PIN1);
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	0e 94 04 01 	call	0x208	; 0x208 <Dio_ClearChannel>
			Dio_WriteChannel(PORT_D, PIN2);
 662:	62 e0       	ldi	r22, 0x02	; 2
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Dio_WriteChannel>
			/*Turn off ServoMotor System*/
		}
		
		else
		{
			ProtectionFlag = FALSE;
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	b7 cf       	rjmp	.-146    	; 0x5dc <main+0x2e>

0000066e <pwm_init>:
#include <avr/io.h>
#include <util/delay.h>

void pwm_init() {
	// Set PD5 (OC1A) as output
	DDRD |= (1 << PD5);
 66e:	81 b3       	in	r24, 0x11	; 17
 670:	80 62       	ori	r24, 0x20	; 32
 672:	81 bb       	out	0x11, r24	; 17

	// Set Fast PWM mode with ICR1 as TOP value
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
 674:	8f b5       	in	r24, 0x2f	; 47
 676:	82 68       	ori	r24, 0x82	; 130
 678:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); // Prescaler of 8
 67a:	8e b5       	in	r24, 0x2e	; 46
 67c:	8a 61       	ori	r24, 0x1A	; 26
 67e:	8e bd       	out	0x2e, r24	; 46

	// Set TOP value for 50Hz frequency
	ICR1 = 19999; // 20ms period
 680:	8f e1       	ldi	r24, 0x1F	; 31
 682:	9e e4       	ldi	r25, 0x4E	; 78
 684:	97 bd       	out	0x27, r25	; 39
 686:	86 bd       	out	0x26, r24	; 38
 688:	08 95       	ret

0000068a <ServoMotor_voidSetAngle>:
}

void ServoMotor_voidSetAngle(uint8_t degree) {
	// Convert degree (0-180) to duty cycle
	uint16_t duty_cycle = ((degree * 11) + 1000); // Map 0-180 to 1000-2000
 68a:	2b e0       	ldi	r18, 0x0B	; 11
 68c:	82 9f       	mul	r24, r18
 68e:	c0 01       	movw	r24, r0
 690:	11 24       	eor	r1, r1
 692:	88 51       	subi	r24, 0x18	; 24
 694:	9c 4f       	sbci	r25, 0xFC	; 252

	OCR1A = duty_cycle; // Set the duty cycle
 696:	9b bd       	out	0x2b, r25	; 43
 698:	8a bd       	out	0x2a, r24	; 42
 69a:	08 95       	ret

0000069c <Temp_voidInit>:
{
	ADC_Configuration adcConfig;
	adcConfig.AutoTriggerState= 0; // Auto-trigger disabled
	adcConfig.TriggerSource= 0;    // No trigger source
	adcConfig.DivisionFactor= 3;
	ADC_Init();
 69c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 6a0:	08 95       	ret

000006a2 <Temp_ErrStateGetReadValue>:
}

void Temp_ErrStateGetReadValue(uint16* tempValue)
{
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <Temp_ErrStateGetReadValue+0xa>
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	8c 01       	movw	r16, r24

	uint16 TempSensor_Vout_mv = 0; //The analog vout of temperature sensor
	uint8 Temperature_Degree  = 0;
	uint16 TempAdcRead=0;
 6b2:	1a 82       	std	Y+2, r1	; 0x02
 6b4:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_Read(PIN2, &TempAdcRead);
 6b6:	be 01       	movw	r22, r28
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_Read>

	TempSensor_Vout_mv = (TempAdcRead  * 4.88) ; // Convert form digital volt to analog volt
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
 6c4:	7a 81       	ldd	r23, Y+2	; 0x02
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__floatunsisf>
 6ce:	26 ef       	ldi	r18, 0xF6	; 246
 6d0:	38 e2       	ldi	r19, 0x28	; 40
 6d2:	4c e9       	ldi	r20, 0x9C	; 156
 6d4:	50 e4       	ldi	r21, 0x40	; 64
 6d6:	0e 94 43 04 	call	0x886	; 0x886 <__mulsf3>
 6da:	0e 94 ae 03 	call	0x75c	; 0x75c <__fixunssfsi>

	Temperature_Degree = TempSensor_Vout_mv / TempSensor_Step_mv ;    // Convert the analog volt to Temperature Degree
 6de:	9b 01       	movw	r18, r22
 6e0:	ad ec       	ldi	r26, 0xCD	; 205
 6e2:	bc ec       	ldi	r27, 0xCC	; 204
 6e4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__umulhisi3>
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	96 95       	lsr	r25
 6ee:	87 95       	ror	r24
 6f0:	96 95       	lsr	r25
 6f2:	87 95       	ror	r24

	*tempValue = Temperature_Degree ; //The function return the temperature degree from temperature sensor
 6f4:	99 27       	eor	r25, r25
 6f6:	f8 01       	movw	r30, r16
 6f8:	91 83       	std	Z+1, r25	; 0x01
 6fa:	80 83       	st	Z, r24

}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <WaterSensor_Voidinit>:
	// Initialize ADC Configurations
	ADC_Configuration adcConfig;
	adcConfig.AutoTriggerState= 0; // Auto-trigger disabled
	adcConfig.TriggerSource= 0;    // No trigger source
	adcConfig.DivisionFactor= 3;   // ADC prescaler division factor 8
	ADC_Init();
 70a:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 70e:	08 95       	ret

00000710 <WaterSensor_VoidGetWaterLevelStateAsyc>:
	//ADC_voidInitPolling(adcConfig);
}

void WaterSensor_VoidGetWaterLevelStateAsyc(uint16* WaterVal)
{
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	00 d0       	rcall	.+0      	; 0x71a <WaterSensor_VoidGetWaterLevelStateAsyc+0xa>
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	8c 01       	movw	r16, r24
	uint16 waterSensorValue = 0; // Variable to store the sensor reading
 720:	1a 82       	std	Y+2, r1	; 0x02
 722:	19 82       	std	Y+1, r1	; 0x01

	//Dio_SetChannelDirection(PORT_C,WATER_SENSOR_PIN,INPUT);//sensor pin
	Dio_SetChannelDirection(PORT_D,LED_Detected,OUTPUT);// led1
 724:	41 e0       	ldi	r20, 0x01	; 1
 726:	61 e0       	ldi	r22, 0x01	; 1
 728:	83 e0       	ldi	r24, 0x03	; 3
 72a:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>
	Dio_SetChannelDirection(PORT_D,LED_NotDetected,OUTPUT);// led2
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	62 e0       	ldi	r22, 0x02	; 2
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	0e 94 3c 01 	call	0x278	; 0x278 <Dio_SetChannelDirection>

	// Read analog input from the water sensor
	 ADC_Read(WATER_SENSOR_PIN,&waterSensorValue);
 738:	be 01       	movw	r22, r28
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_Read>
	//ADC_Read(WATER_SENSOR_PIN,&waterSensorValue);
	
	*WaterVal = waterSensorValue;
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	9a 81       	ldd	r25, Y+2	; 0x02
 748:	f8 01       	movw	r30, r16
 74a:	91 83       	std	Z+1, r25	; 0x01
 74c:	80 83       	st	Z, r24

	// Check the sensor reading and take appropriate actions
	//_delay_ms(1000); // Add a delay if needed
}
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <__fixunssfsi>:
 75c:	0e 94 22 04 	call	0x844	; 0x844 <__fp_splitA>
 760:	88 f0       	brcs	.+34     	; 0x784 <__fixunssfsi+0x28>
 762:	9f 57       	subi	r25, 0x7F	; 127
 764:	98 f0       	brcs	.+38     	; 0x78c <__fixunssfsi+0x30>
 766:	b9 2f       	mov	r27, r25
 768:	99 27       	eor	r25, r25
 76a:	b7 51       	subi	r27, 0x17	; 23
 76c:	b0 f0       	brcs	.+44     	; 0x79a <__fixunssfsi+0x3e>
 76e:	e1 f0       	breq	.+56     	; 0x7a8 <__fixunssfsi+0x4c>
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	88 1f       	adc	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	1a f0       	brmi	.+6      	; 0x780 <__fixunssfsi+0x24>
 77a:	ba 95       	dec	r27
 77c:	c9 f7       	brne	.-14     	; 0x770 <__fixunssfsi+0x14>
 77e:	14 c0       	rjmp	.+40     	; 0x7a8 <__fixunssfsi+0x4c>
 780:	b1 30       	cpi	r27, 0x01	; 1
 782:	91 f0       	breq	.+36     	; 0x7a8 <__fixunssfsi+0x4c>
 784:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_zero>
 788:	b1 e0       	ldi	r27, 0x01	; 1
 78a:	08 95       	ret
 78c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_zero>
 790:	67 2f       	mov	r22, r23
 792:	78 2f       	mov	r23, r24
 794:	88 27       	eor	r24, r24
 796:	b8 5f       	subi	r27, 0xF8	; 248
 798:	39 f0       	breq	.+14     	; 0x7a8 <__fixunssfsi+0x4c>
 79a:	b9 3f       	cpi	r27, 0xF9	; 249
 79c:	cc f3       	brlt	.-14     	; 0x790 <__fixunssfsi+0x34>
 79e:	86 95       	lsr	r24
 7a0:	77 95       	ror	r23
 7a2:	67 95       	ror	r22
 7a4:	b3 95       	inc	r27
 7a6:	d9 f7       	brne	.-10     	; 0x79e <__fixunssfsi+0x42>
 7a8:	3e f4       	brtc	.+14     	; 0x7b8 <__fixunssfsi+0x5c>
 7aa:	90 95       	com	r25
 7ac:	80 95       	com	r24
 7ae:	70 95       	com	r23
 7b0:	61 95       	neg	r22
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__floatunsisf>:
 7ba:	e8 94       	clt
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <__floatsisf+0x12>

000007be <__floatsisf>:
 7be:	97 fb       	bst	r25, 7
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__floatsisf+0x12>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	99 23       	and	r25, r25
 7d2:	a9 f0       	breq	.+42     	; 0x7fe <__floatsisf+0x40>
 7d4:	f9 2f       	mov	r31, r25
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	bb 27       	eor	r27, r27
 7da:	93 95       	inc	r25
 7dc:	f6 95       	lsr	r31
 7de:	87 95       	ror	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	f1 11       	cpse	r31, r1
 7e8:	f8 cf       	rjmp	.-16     	; 0x7da <__floatsisf+0x1c>
 7ea:	fa f4       	brpl	.+62     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7ec:	bb 0f       	add	r27, r27
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <__floatsisf+0x36>
 7f0:	60 ff       	sbrs	r22, 0
 7f2:	1b c0       	rjmp	.+54     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7f4:	6f 5f       	subi	r22, 0xFF	; 255
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7fe:	88 23       	and	r24, r24
 800:	11 f0       	breq	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	96 e9       	ldi	r25, 0x96	; 150
 804:	11 c0       	rjmp	.+34     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 806:	77 23       	and	r23, r23
 808:	21 f0       	breq	.+8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80a:	9e e8       	ldi	r25, 0x8E	; 142
 80c:	87 2f       	mov	r24, r23
 80e:	76 2f       	mov	r23, r22
 810:	05 c0       	rjmp	.+10     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 812:	66 23       	and	r22, r22
 814:	71 f0       	breq	.+28     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 816:	96 e8       	ldi	r25, 0x86	; 134
 818:	86 2f       	mov	r24, r22
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	2a f0       	brmi	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 820:	9a 95       	dec	r25
 822:	66 0f       	add	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	88 1f       	adc	r24, r24
 828:	da f7       	brpl	.-10     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82a:	88 0f       	add	r24, r24
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	97 f9       	bld	r25, 7
 832:	08 95       	ret

00000834 <__fp_split3>:
 834:	57 fd       	sbrc	r21, 7
 836:	90 58       	subi	r25, 0x80	; 128
 838:	44 0f       	add	r20, r20
 83a:	55 1f       	adc	r21, r21
 83c:	59 f0       	breq	.+22     	; 0x854 <__fp_splitA+0x10>
 83e:	5f 3f       	cpi	r21, 0xFF	; 255
 840:	71 f0       	breq	.+28     	; 0x85e <__fp_splitA+0x1a>
 842:	47 95       	ror	r20

00000844 <__fp_splitA>:
 844:	88 0f       	add	r24, r24
 846:	97 fb       	bst	r25, 7
 848:	99 1f       	adc	r25, r25
 84a:	61 f0       	breq	.+24     	; 0x864 <__stack+0x5>
 84c:	9f 3f       	cpi	r25, 0xFF	; 255
 84e:	79 f0       	breq	.+30     	; 0x86e <__stack+0xf>
 850:	87 95       	ror	r24
 852:	08 95       	ret
 854:	12 16       	cp	r1, r18
 856:	13 06       	cpc	r1, r19
 858:	14 06       	cpc	r1, r20
 85a:	55 1f       	adc	r21, r21
 85c:	f2 cf       	rjmp	.-28     	; 0x842 <__fp_split3+0xe>
 85e:	46 95       	lsr	r20
 860:	f1 df       	rcall	.-30     	; 0x844 <__fp_splitA>
 862:	08 c0       	rjmp	.+16     	; 0x874 <__stack+0x15>
 864:	16 16       	cp	r1, r22
 866:	17 06       	cpc	r1, r23
 868:	18 06       	cpc	r1, r24
 86a:	99 1f       	adc	r25, r25
 86c:	f1 cf       	rjmp	.-30     	; 0x850 <__fp_splitA+0xc>
 86e:	86 95       	lsr	r24
 870:	71 05       	cpc	r23, r1
 872:	61 05       	cpc	r22, r1
 874:	08 94       	sec
 876:	08 95       	ret

00000878 <__fp_zero>:
 878:	e8 94       	clt

0000087a <__fp_szero>:
 87a:	bb 27       	eor	r27, r27
 87c:	66 27       	eor	r22, r22
 87e:	77 27       	eor	r23, r23
 880:	cb 01       	movw	r24, r22
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__mulsf3>:
 886:	0e 94 56 04 	call	0x8ac	; 0x8ac <__mulsf3x>
 88a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_round>
 88e:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_pscA>
 892:	38 f0       	brcs	.+14     	; 0x8a2 <__mulsf3+0x1c>
 894:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_pscB>
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__mulsf3+0x1c>
 89a:	95 23       	and	r25, r21
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__mulsf3+0x1c>
 89e:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_inf>
 8a2:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_nan>
 8a6:	11 24       	eor	r1, r1
 8a8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_szero>

000008ac <__mulsf3x>:
 8ac:	0e 94 1a 04 	call	0x834	; 0x834 <__fp_split3>
 8b0:	70 f3       	brcs	.-36     	; 0x88e <__mulsf3+0x8>

000008b2 <__mulsf3_pse>:
 8b2:	95 9f       	mul	r25, r21
 8b4:	c1 f3       	breq	.-16     	; 0x8a6 <__mulsf3+0x20>
 8b6:	95 0f       	add	r25, r21
 8b8:	50 e0       	ldi	r21, 0x00	; 0
 8ba:	55 1f       	adc	r21, r21
 8bc:	62 9f       	mul	r22, r18
 8be:	f0 01       	movw	r30, r0
 8c0:	72 9f       	mul	r23, r18
 8c2:	bb 27       	eor	r27, r27
 8c4:	f0 0d       	add	r31, r0
 8c6:	b1 1d       	adc	r27, r1
 8c8:	63 9f       	mul	r22, r19
 8ca:	aa 27       	eor	r26, r26
 8cc:	f0 0d       	add	r31, r0
 8ce:	b1 1d       	adc	r27, r1
 8d0:	aa 1f       	adc	r26, r26
 8d2:	64 9f       	mul	r22, r20
 8d4:	66 27       	eor	r22, r22
 8d6:	b0 0d       	add	r27, r0
 8d8:	a1 1d       	adc	r26, r1
 8da:	66 1f       	adc	r22, r22
 8dc:	82 9f       	mul	r24, r18
 8de:	22 27       	eor	r18, r18
 8e0:	b0 0d       	add	r27, r0
 8e2:	a1 1d       	adc	r26, r1
 8e4:	62 1f       	adc	r22, r18
 8e6:	73 9f       	mul	r23, r19
 8e8:	b0 0d       	add	r27, r0
 8ea:	a1 1d       	adc	r26, r1
 8ec:	62 1f       	adc	r22, r18
 8ee:	83 9f       	mul	r24, r19
 8f0:	a0 0d       	add	r26, r0
 8f2:	61 1d       	adc	r22, r1
 8f4:	22 1f       	adc	r18, r18
 8f6:	74 9f       	mul	r23, r20
 8f8:	33 27       	eor	r19, r19
 8fa:	a0 0d       	add	r26, r0
 8fc:	61 1d       	adc	r22, r1
 8fe:	23 1f       	adc	r18, r19
 900:	84 9f       	mul	r24, r20
 902:	60 0d       	add	r22, r0
 904:	21 1d       	adc	r18, r1
 906:	82 2f       	mov	r24, r18
 908:	76 2f       	mov	r23, r22
 90a:	6a 2f       	mov	r22, r26
 90c:	11 24       	eor	r1, r1
 90e:	9f 57       	subi	r25, 0x7F	; 127
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	9a f0       	brmi	.+38     	; 0x93a <__mulsf3_pse+0x88>
 914:	f1 f0       	breq	.+60     	; 0x952 <__mulsf3_pse+0xa0>
 916:	88 23       	and	r24, r24
 918:	4a f0       	brmi	.+18     	; 0x92c <__mulsf3_pse+0x7a>
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	bb 1f       	adc	r27, r27
 920:	66 1f       	adc	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	91 50       	subi	r25, 0x01	; 1
 928:	50 40       	sbci	r21, 0x00	; 0
 92a:	a9 f7       	brne	.-22     	; 0x916 <__mulsf3_pse+0x64>
 92c:	9e 3f       	cpi	r25, 0xFE	; 254
 92e:	51 05       	cpc	r21, r1
 930:	80 f0       	brcs	.+32     	; 0x952 <__mulsf3_pse+0xa0>
 932:	0c 94 b0 04 	jmp	0x960	; 0x960 <__fp_inf>
 936:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_szero>
 93a:	5f 3f       	cpi	r21, 0xFF	; 255
 93c:	e4 f3       	brlt	.-8      	; 0x936 <__mulsf3_pse+0x84>
 93e:	98 3e       	cpi	r25, 0xE8	; 232
 940:	d4 f3       	brlt	.-12     	; 0x936 <__mulsf3_pse+0x84>
 942:	86 95       	lsr	r24
 944:	77 95       	ror	r23
 946:	67 95       	ror	r22
 948:	b7 95       	ror	r27
 94a:	f7 95       	ror	r31
 94c:	e7 95       	ror	r30
 94e:	9f 5f       	subi	r25, 0xFF	; 255
 950:	c1 f7       	brne	.-16     	; 0x942 <__mulsf3_pse+0x90>
 952:	fe 2b       	or	r31, r30
 954:	88 0f       	add	r24, r24
 956:	91 1d       	adc	r25, r1
 958:	96 95       	lsr	r25
 95a:	87 95       	ror	r24
 95c:	97 f9       	bld	r25, 7
 95e:	08 95       	ret

00000960 <__fp_inf>:
 960:	97 f9       	bld	r25, 7
 962:	9f 67       	ori	r25, 0x7F	; 127
 964:	80 e8       	ldi	r24, 0x80	; 128
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	08 95       	ret

0000096c <__fp_nan>:
 96c:	9f ef       	ldi	r25, 0xFF	; 255
 96e:	80 ec       	ldi	r24, 0xC0	; 192
 970:	08 95       	ret

00000972 <__fp_pscA>:
 972:	00 24       	eor	r0, r0
 974:	0a 94       	dec	r0
 976:	16 16       	cp	r1, r22
 978:	17 06       	cpc	r1, r23
 97a:	18 06       	cpc	r1, r24
 97c:	09 06       	cpc	r0, r25
 97e:	08 95       	ret

00000980 <__fp_pscB>:
 980:	00 24       	eor	r0, r0
 982:	0a 94       	dec	r0
 984:	12 16       	cp	r1, r18
 986:	13 06       	cpc	r1, r19
 988:	14 06       	cpc	r1, r20
 98a:	05 06       	cpc	r0, r21
 98c:	08 95       	ret

0000098e <__fp_round>:
 98e:	09 2e       	mov	r0, r25
 990:	03 94       	inc	r0
 992:	00 0c       	add	r0, r0
 994:	11 f4       	brne	.+4      	; 0x99a <__fp_round+0xc>
 996:	88 23       	and	r24, r24
 998:	52 f0       	brmi	.+20     	; 0x9ae <__fp_round+0x20>
 99a:	bb 0f       	add	r27, r27
 99c:	40 f4       	brcc	.+16     	; 0x9ae <__fp_round+0x20>
 99e:	bf 2b       	or	r27, r31
 9a0:	11 f4       	brne	.+4      	; 0x9a6 <__fp_round+0x18>
 9a2:	60 ff       	sbrs	r22, 0
 9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__fp_round+0x20>
 9a6:	6f 5f       	subi	r22, 0xFF	; 255
 9a8:	7f 4f       	sbci	r23, 0xFF	; 255
 9aa:	8f 4f       	sbci	r24, 0xFF	; 255
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <__umulhisi3>:
 9b0:	a2 9f       	mul	r26, r18
 9b2:	b0 01       	movw	r22, r0
 9b4:	b3 9f       	mul	r27, r19
 9b6:	c0 01       	movw	r24, r0
 9b8:	a3 9f       	mul	r26, r19
 9ba:	70 0d       	add	r23, r0
 9bc:	81 1d       	adc	r24, r1
 9be:	11 24       	eor	r1, r1
 9c0:	91 1d       	adc	r25, r1
 9c2:	b2 9f       	mul	r27, r18
 9c4:	70 0d       	add	r23, r0
 9c6:	81 1d       	adc	r24, r1
 9c8:	11 24       	eor	r1, r1
 9ca:	91 1d       	adc	r25, r1
 9cc:	08 95       	ret

000009ce <_exit>:
 9ce:	f8 94       	cli

000009d0 <__stop_program>:
 9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <__stop_program>
